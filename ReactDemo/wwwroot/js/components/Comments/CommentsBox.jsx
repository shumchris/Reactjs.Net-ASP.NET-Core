'use strict';

import React from 'react';
import CommentsList from '../../client-components/Comments/CommentsList';
import CommentForm from '../../client-components/Comments/CommentForm';

class CommentsBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            data: props.initialData
        };
    }
    loadCommentsFromServer() {
        var xhr = new XMLHttpRequest();
        xhr.open('get', "/comments", true);
        xhr.onload = function () {
            var data = JSON.parse(xhr.responseText);
            this.setState({ data: data });
        }.bind(this);
        xhr.send();
    }
    componentDidMount() {
        this.loadCommentsFromServer.bind(this).call();
        window.setInterval(this.loadCommentsFromServer.bind(this), this.props.pollInterval);
    }
    handleCommentSubmit(comment) {
        this.optimisticAddComment(comment);

        var data = new FormData();
        data.append('author', comment.author);
        data.append('text', comment.text);

        var xhr = new XMLHttpRequest();
        xhr.open('post', "/comments/new", true);
        xhr.onload = function () {
            this.loadCommentsFromServer();
        }.bind(this);
        xhr.send(data);
    }
    optimisticAddComment(comment) {
        //the purpose of this is to make the comment appear 
        //in the list before the get request to load up the 
        //new list of comments
        var comments = this.state.data;
        comment.id = Date.now();//this will be replaced with the id generated by the server
        var newComments = comments.concat([comment]);
        this.setState({ data: newComments })
    }
    render() {
        return (
            <div className="commentsBox">
                <h1>Comments</h1>
                <CommentsList data={this.state.data} />
                <h1>Write A Comment</h1>
                <CommentForm onCommentSubmit={this.handleCommentSubmit.bind(this)}/>
            </div>
        );
    }
}

export default CommentsBox;